[
  {
    "path": "posts/us_scripts/",
    "title": "Scripts en Bash para realizar cálculos Umbrella Sampling (QM/MM MD)",
    "description": "En este post presento dos scripts que sirven para generar los archivos de entrada para poder correr cálculos de Umbrella Sampling en sistemas proteína-ligando.",
    "author": [
      {
        "name": "Camilo Febres-Molina",
        "url": "https://github.com/camilofm"
      }
    ],
    "date": "2022-09-20",
    "categories": [],
    "contents": "\n\n\n\nIndicaciones iniciales\nLos siguientes dos scripts en Bash requieren de algunos\n\n\n\n",
    "preview": "posts/us_scripts/pictures/code.png",
    "last_modified": "2022-10-03T21:00:30-05:00",
    "input_file": "us_scripts.knit.md"
  },
  {
    "path": "posts/tutorial_bfee/",
    "title": "Estimador de Energía Libre de Unión para sistemas proteína-ligando (BFEE - Plugin de VMD): Tutorial de uso",
    "description": "Aquí veremos cómo utilizar el Plugin BFEE de VMD de manera sencilla para generar archivos de entrada y así poder correr los cálculos MD del sistema en estudio y así obtener el &Delta;Gº de unión por medio del Potencial de Fuerza Medio (PMF).",
    "author": [
      {
        "name": "Camilo Febres-Molina",
        "url": "https://github.com/camilofm"
      }
    ],
    "date": "2022-09-01",
    "categories": [],
    "contents": "\nEste tutorial fue realizado en colaboración con Leslie\nSanchez.\n\n\n\n\nEl plugin BFEE permite la generación de archivos de entrada para\nrealizar el cálculo de ΔG absoluto de unión en NAMD usando variables\ncolectivas (Fu et al. 2018). Los archivos de entrada\nse generan en el software VMD, con lo cual se generarán los archivos\nnecesarios para realizar los cálculos de 8 carpetas. Posteriormente, el\nplugin permite el procesamiento de los datos.\nEl plugin se debe descargar desde la SI del artículo colocado en la\nsección final de Referencias, y que titula: “BFEE: A\nUser-Friendly Graphical Interface Facilitating Absolute Binding\nFree-Energy Calculations”.\nEn la SI también se encuentran las instrucciones de instalación tanto\npara Windows como para Linux y OSX. (En nuestra experiencia este Plugin\nresponde mejor en Ubuntu que en Windows.)\nGeneración de inputs:\nUna vez instalado el plugin en VMD aparecerá en “extensions → my\nplugins → BFEE”. Para su uso es necesario tener archivos del sistema a\ntrabajar equilibrado, ya que para generar los inputs se requieren los\nsiguientes archivos del sistema → *.psf, *.coor, *.vel, *.xsc y los\narchivos de parámetros necesarios para el sistema en cuestión.\nEl plugin es bastante user-friendly, por lo que, al abrirlo se\nentiende dónde hay que poner los archivos requeridos, luego hay que\npinchar la opción “generar inputs”, a partir de lo cual se generarán 8\ncarpetas, las cuales se deben transferir al cluster donde esté instalado\nNAMD.\nCorrer los archivos en NAMD:\nEn cada carpeta habrá un archivo de configuración “abf.conf” que es\nel que contiene la información para correr el cálculo, del cual no es\nnecesario modificar nada.\nAdemás, en cada carpeta existe el archivo colvar.in, que tiene la\ninformación de las variables colectivas. Luego de algunos ensayos se\nobservó que es necesario agregar los keywords “lowerWall” y “upperWall”\nluego de la información de lower y upperboundary, (los valores de los\nkeywords mencionados deben ser iguales, como se muestra a continuación\nen un ejemplo:\n\n\n\nCon esto listo se deben correr las carpetas desde la 001 a la 008 de\nforma sucesiva.\nNota: Considerar lo siguiente, la carpeta 007\nconsiste de una solvatación extra del sistema, por lo cual el plugin\nconstruye un nuevo psf y pdb donde la caja de agua es más extensa en\ntamaño, con lo cual crece el número de átomos (en algunos casos al\ntriple). De esto se ha observado que en proteínas donde el número de\nátomos supere los ~150 - 200 mil átomos, el cálculo no se llevará a\ncabo, dado que se generan errores (al menos en la versión de NAMD que se\ntiene actualmente instalada en el cluster UDEC) por lo cual será\nnecesario hacer modificaciones en el archivo de la carpeta 007 en caso\nde que se genere una proteína con un número de átomos muy grande.\nSe ha seguido la siguiente metodología en carpeta 007 para llevar a\ncabo el cálculo:\nTomando como base el archivo bound.psf, bound.coor.pdb (carpeta\n007_r), los archivos solvated.psf y solvated.pdb, ligand.pdb y\nprotein.pdb fueron editados para reducir la cantidad de átomos (remover\nlas moléculas de agua adicionales). Por lo que se realizó lo\nsiguiente:\nLos archivos bound.psf, bound.coor.pdb, se copiaron a\nsolvated.psf y solvated.pdb. En el archivo solvated.pdb se agregó 1.00\nen la columna A.\nSe tomó ligand.pdb de la carpeta 006 y se copió por ligand.pdb en\nla carpeta 007_r. Se agregó 1.00 en la columna A.\nSe tomó protein.pdb de la carpeta 006 y se copió por protein.pdb\nen carpeta 007_r. Se agregó 1.00 en la columna A.\nDebido a que el archivo solvated.pdb ahora es un sistema más\npequeño se deben cambiar los valores de tamaño de celda en el archivo\nabf.conf, para lo cual se utiliza VMD para calcular los valores de celda\ny centro del sistema (tkconsole, comandos measure minmax y measure\ncenter).\nProcesamiento de datos:\nUna vez finalizado el cálculo en las 8 carpetas se observará que cada\ncarpeta contiene una carpeta “output” donde se fueron escribiendo\ndiferentes archivos de salida, entre ellos una trayectoria *.dcd y el\narchivo que permitirá obtener el valor de energía libre, *.czar.pmf, los\ncuales se deben cargar en la ventana del plugin “analyze” y luego\npinchar “compute binding free energy” con lo cual se obtendrá el valor\nfinal de energía libre absoluta (a continuación se incluye una imagen de\nla ventana del plugin donde se deben cargar los respectivos\noutputs).\n\n\n\n\n\n\nFu, Haohao, James C Gumbart, Haochuan Chen, Xueguang Shao, Wensheng Cai,\nand Christophe Chipot. 2018. “BFEE: A User-Friendly Graphical\nInterface Facilitating Absolute Binding Free-Energy\nCalculations.” Journal of Chemical Information and\nModeling 58 (3): 556–60.\n\n\n\n\n",
    "preview": "posts/tutorial_bfee/pictures/bfee.png",
    "last_modified": "2022-10-03T15:01:33-05:00",
    "input_file": {}
  },
  {
    "path": "posts/tutorial_gromacs/",
    "title": "Análisis post producción de la dinámica molecular con Gromacs - Tutorial",
    "description": "Aquí veremos paso a paso cómo es que podemos utilizar la suite Gromacs para el análisis post producción de una dinámica molecular realizada con los programas Gromacs, CHARMM o NAMD.",
    "author": [
      {
        "name": "Camilo Febres-Molina",
        "url": "https://github.com/camilofm"
      }
    ],
    "date": "2022-08-25",
    "categories": [],
    "contents": "\n\n\n\nExisten muchas metodologías, softwares y servidores en línea\ndiseñados para analizar la trayectoria obtenida luego de la producción\nde una dinámica molecular (MD) para, así, obtener información que dé\ncuenta de la estabilidad de dicha corrida en un período específico, las\nfluctuaciones de ciertos residuos, entre otros. Sin embargo, el paquete de software Gromacs nos\npermite, en un solo lugar, realizar todos estos análisis y muchos otros\nde forma relativamente simple y utilizando la línea de comandos (Abraham et al. 2015; Páll et al. 2020).\nEl presente tutorial abarcará los siguientes análisis post producción\nde la MD:\nRMSD\nRMSF, factor-B y estructura promedio\nRadio de giro\nSASA y energía libre de solvatación estimada\nMediciones: distancias, ángulos y diedros\nEstructura secundaria\nDensidad\nEnlaces de hidrógeno\n\nIndicaciones y\nrecomendaciones iniciales\n\nAntes de iniciar con los diferentes análisis se debe tener en cuenta\nque la trayectoria a utilizar sea la óptima, por ejemplo, que no\ncontenga “saltos” o algunas moléculas que parecieran estar “rotas”\ndebido a la periodicidad de contorno (PBC) durante la MD. Por lo que es\nuna buena práctica realizar la revisión de dicha trayectoria (en algún\nvisualizador, como VMD) o, en su defecto, utilizar el programa trjconv\npara restaurar dichos “saltos” o “rupturas” como veremos en el punto 2.\nA lo largo de este tutorial, y a modo de ejemplo, se utilizarán los\nsiguientes archivos de entrada iniciales: coor.pdb, traj.dcd y topol.psf\n(suponiendo que son estos archivos con sus extensiones los que se\nobtuvieron al realizar la MD luego de correrlos en NAMD o AMBER, por\nejemplo). Lo primero que se debe hacer es convertir la trayectoria\ntraj.dcd a un formato que gromacs utilice y pueda manejar, como traj.trr\no traj.xtc, por lo que a través del programa VMD, y luego de cargar toda\nla trayectoria (topol.psf + traj.dcd), se guardará dicha trayectoria (en\n“File” -> “Save coordinates” -> “File type”) con la extensión\n“trr”. El único inconveniente al convertir la trayectoria a este\nformato, y no obtenerlo de forma nativa (habiendo corrido la MD con\nGromacs), es que las etiquetas de tiempo deberán corregirse luego con el\ngraficador que utilicemos (por ejemplo, con Grace).\nTratamiento adecuado de\nla trayectoria\nEl programa trjconv se utiliza básicamente para convertir la\ntrayectoria trr (generalmente pesada) en otra comprimida y más manejable\nxtc. Además también se utilizará a continuación para reparar algún\nproblema de PBC en la trayectoria inicial. En la misma carpeta en la que\nestén los archivos de entrada que se tienen hasta ahora (y donde debe\nestar también traj.trr) se generará un archivo pdb con las coordinadas\ndel frame inicial de la trayectoria (también se puede utilizar VMD para\nesto) y se llamará coor-tpr.pdb, esto con la intención de utilizarlo en\nvez del archivo tpr que requieren todos los programas de Gromacs y que\nsirve de coordenadas de referencia. Una vez hecho esto, y en la\nmencionada carpeta, se correrá la siguiente línea de comando en la\nterminal:\ngmx trjconv -f traj.trr -s coor-tpr.pdb -o traj.xtc -pbc mol -ur\ncompact -center\n-> Para centrar, escoger la opción “proteína” y como salida la\nopción “sistema”. Con lo que el archivo de salida aquí será traj.xtc y\nes el que se utilizará de ahora en adelante para los siguientes\nanálisis.\nCabe mencionar aquí que así no existan problemas de “saltos” o\n“rupturas” en nuestra trayectoria original (traj.dcd) es una buena\npráctica utilizar las opciones -pbc mol, -ur compact y -center, ya que\nno afectarán en nada en el caso de que no se necesiten.\nRMSD\nSe correrá la siguiente línea de comando para generar un archivo para\nser posteriormente graficado:\ngmx rms -f traj.xtc -s coor-tpr.pdb -o rmsd.xvg\n-> Aquí se escogerá a la “proteína” en ambas opciones para que el\ncálculo de la desviación media cuadrática sea para esa estructura\núnicamente y no para todo el sistema. Una vez generado el archivo de\nsalida rmsd.xvg se podrá utilizar un programa (por defecto el formato de\ndicho archivo es para el programa Grace) para obtener la gráfica RMSD de\nla proteína a lo largo de la MD. Como se mencionó en el punto 1, se debe\ncorregir la etiqueta del tiempo en dicho graficador (que por defecto\nestá en ps).\nNota: En el caso de que, aún habiendo realizado el comando del punto\n2, se visualice un salto abrupto (anormal) en la gráfica del RMSD, se\npuede correr las siguientes líneas de comando para intentar arreglar el\nproblema:\ngmx trjconv -f traj.xtc -s coor-tpr.pdb -o traj_no-jump.xtc -pbc\nnojump\ngmx trjconv -f traj_no-jump.xtc -s coor-tpr.pdb -o traj_fit.xtc\n-fit rot+trans\nHaciendo esto y luego recalculando el RMSD con:\ngmx rms -f traj_fit.xtc -s coor-tpr.pdb -o rmsd_fit.xvg\nSe obtendrá el nuevo archivo de salida rmsd_fit.xvg con el cual muy\nprobablemente ya se pueda generar una gráfica RMSD corregida y sin\nsaltos anormales. Sólo si éste es el caso, entonces para lo que resta\ndel tutorial se deberá utilizar el archivo traj_fit.xtc cada que se vea\ntraj.xtc ya que es el corregido.\nEn el caso de que la primera gráfica (aquella generada con rmsd.xvg)\nesté sin anormalidades se utilizará el archivo traj.xtc para lo que\nresta de los análisis.\nRMSF, factor-B y estructura\npromedio\nA continuación se generarán archivos para poder graficar las\nfluctuaciones por residuo, un pdb que contiene en la columna beta la\ninformación sobre dichas fluctuaciones para luego poder representarlo en\ncolores (en VMD, por ejemplo) y otro pdb que contendrá las coordenadas\nde la estructura promedio de la trayectoria (o segmento que se escoja de\nella).\nPrimero, a través de la gráfica del RMSD anterior, se seleccionará la\nparte de la trayectoria que sea estable para utilizarla. Recordar que\npor defecto Gromacs utiliza los ps como unidad de tiempo, por lo que se\ndebe conocer el intervalo estable de la mencionada trayectoria en ps (se\npuede lograr esto viendo el eje x en el gráfico RMSD antes de haber\ncorregido los tiempos a ns, como se mencionó en los puntos 1 y 3).\nPara esto, se correrá la siguiente línea de comando:\ngmx rmsf -f traj.xtc -s coor-tpr.pdb -oq coor_bfac.pdb -ox\ncoor_avrg.pdb -o rmsf.xvg -res -b A -e B\n-> Se deberá escoger sólo la proteína para realizar el\ncálculo.\n-> A y B son los tiempos (en ps) del primer y último frame,\nrespectivamente, para ser leídos de la trayectoria completa. Por\nejemplo, en el caso que se tenga una trayectoria total de 10 ps\n(probablemente de 100 ns - recordar que así lee Gromacs las trayectorias\nque originalmente son dcd y se convirtieron a trr en VMD) y se sepa que\nla parte estable es a partir del ps 4.5 (ns 45) hasta el final,\nentonces, los valores de A y B para la anterior línea de comando serían\n4.5 y 10, respectivamente.\nDe esta manera se podrá graficar el archivo de salida rmsf.xvg para\nobtener el RMSF (por residuo). Así como también se habrán generado los\narchivos coor_bfac.pdb y coor_avrg.pdb los que dan cuenta de las\ncoordenadas de la proteína (de referencia - frame inicial) con el\nfactor-B y coordenadas de la estructura promedio, respectivamente,\núnicamente del intervalo de la trayectoria antes escogido.\nRadio de giro\nCalcular el radio de giro de una proteína sobre los ejes x, y, z como\nfunción del tiempo es útil para conocer el grado de compactación que\npudo haber sufrido esta estructura a lo largo de la trayectoria.\nSe correrá la siguiente línea de comando:\ngmx gyrate -f traj.xtc -s coor-tpr.pdb -o rg.xvg -b A -e B\n-> Se deberá escoger sólo la proteína.\n-> Siendo A y B los mismos tiempos (en ps) utilizados en el punto\n4.\nAsí, esto nos arrojará un archivo de salida rg.xvg el que se podrá\ngraficar.\nCabe mencionar que se le llama “radio de giro” pues luego de calcular\nla ponderación por masa de cada átomo en el espacio, dichos puntos se\ncomparan frame a frame con el centro de masa de toda la proteína (a modo\nde colocar esta proteína dentro de una esfera) y el “radio” resultante\nmás alejado del centro es aquel que se asigna en cada frame; finalmente,\ny a groso modo, se obtienen así las dos columnas del archivo rg.xvg.\nSASA y energía\nlibre de solvatación estimada\nCon la siguiente línea de comando se calculará tanto el área\nsuperficial accesible al solvente (también conocida como superficie\nmolecular de Lee-Richards) de toda la proteína, como también la energía\nlibre de solvatación estimada como función del tiempo: gmx sasa -f\ntraj.xtc -s coor-tpr.pdb -o sasa.xvg -odg delta-g_solv.xvg -b A -e B\n-> Se deberá escoger sólo la proteína. -> Siendo A y B los mismos\ntiempos (en ps) utilizados en el punto 4. Con los archivos de salida\ngenerados, sasa.xvg y delta-g_solv.xvg, se podrá graficar la superficie\nde Lee-Richards y la energía libre de solvatación estimada (con unidades\nde kJ·mol-1·nm-2), respectivamente, dentro del intervalo de la\ntrayectoria escogido.\nMediciones a lo largo\nde la trayectoria\nExisten diversas formas de realizar mediciones entre átomos, ya sean\ndistancias lineales entre ellos, ángulos o diedros. Para realizar estas\nmediciones es necesario generar un archivo index.ndx con el programa\nmake_ndx, así:\ngmx make_ndx -f coor-tpr.pdb -o index.ndx\n-> En el que se escogerán átomos o residuos que se desee medir\ncreando así un “grupo nuevo” con la selección de dicho elemento. Cabe\nrecordar que serán dos grupos para la medición de distancias, tres\ngrupos para medir ángulos y cuatro grupos para la medición de ángulos\ndiedros.\nDistancias\nSi se desea medir la distancia entre dos átomos o dos residuos, estos\núltimos por medio de su centro de masa (com), la línea de comando deberá\nser algo así:\ngmx distance -f traj.xtc -s coor-tpr.pdb -n index.ndx -oav\ndistance.xvg -select “com of group X plus com of group Y” -b A -e B\n-> Donde X y Y son los grupos (que poseen un elemento cada uno)\nque se desea medir, sean éstos un par de átomos (no habrá problema con\nque se calcule el centro de masa de un átomo, pues serán las mismas\ncoordenadas) o un par de residuos.\n-> Siendo A y B los mismos tiempos (en ps) utilizados en el punto\n4. De esta manera se podrá graficar el archivo de salida distance.xvg y\nasí conocer la distancia entre éstos elementos a lo largo de la\ntrayectoria escogida.\nÁngulos\nPara este caso, la línea de comando sería así:\ngmx gangle -f traj.xtc -n index -g1 angle -oav angles.xvg -group1\n“com of group X plus com of group Y plus com of group Z” -b A -e B\n-> Donde X, Y y Z son los grupos con los elementos que se desee\nmedir.\n-> Siendo A y B los mismos tiempos (en ps) utilizados en el punto\n4.\nAsí, se podrá graficar el archivo de salida angles.xvg.\nDiedros\nPara el caso de los diedros la línea de comandos sería algo así:\ngmx gangle -f traj.xtc -n index -g1 dihedral -oav dihedrals.xvg\n-group1 “com of group W plus com of group X plus com of group Y plus com\nof group Z” -b A -e B\n-> Donde W, X, Y y Z son los grupos que se desee medir.\n-> Siendo A y B los mismos tiempos (en ps) utilizados en el punto\n4.\nAsí, se podrá graficar el archivo de salida dihedrals.xvg.\nEstructura secundaria\nPara el cálculo de la estructura secundaria de la proteína en función\ndel tiempo se necesitará realizar la instalación de un pequeño programa\nllamado dssp, el cual se puede hacer del siguiente sitio web: https://swift.cmbi.umcn.nl/gv/dssp. Además, Gromacs\nrequiere que el ejecutable de dicho programa esté localizado en\n/usr/local/bin/dssp.\nLa siguiente línea de comando se utilizará para realizar este\ncálculo:\ngmx do_dssp -f traj.xtc -s coor-tpr.pdb -map ss.map -o ss.xpm -b A -e\nB\n-> Donde el archivo de entrada ss.map es aquel que mapea los datos\nde una matriz a valores RGB que son utilizados por el programa do_dssp.\nEste archivo debe contener lo siguiente:\n8\n\nCoil 1.0 1.0 1.0 E B-Sheet 1.0 0.0 0.0 B B-Bridge 0.0 0.0 0.0 S Bend 0.0\n0.8 0.8 T Turn 1.0 1.0 0.0 H A-Helix 0.0 0.0 1.0 G 3-Helix 1.0 0.0 1.0 I\n5-Helix 1.0 0.6 0.0\n\nEl archivo de salida ss.xpm generado se podrá convertir a uno de\nimagen por el programa xpm2ps así:\ngmx xpm2ps -f ss.xpm -di ps.m2p -o ss.eps\n-> Donde el archivo de entrada ps.m2p es aquel que le da los\nparámetros (que se pueden modificar) al programa para generar el archivo\nde salida ss.eps. El archivo ps.m2p debe contener lo siguiente:\n; Command line options of xpm2ps override the parameters in this file\nblack&white = no ; Obsolete titlefont = Times-Roman ; A PostScript\nFont titlefontsize = 20 ; Font size (pt) legend = yes ; Show the legend\nlegendfont = Times-Roman ; A PostScript Font legendlabel = ; Used when\nthere is none in the .xpm legend2label = ; Used when merging two xpm’s\nlegendfontsize = 14 ; Font size (pt) xbox = 2.0 ; x-size of a matrix\nelement ybox = 2.0 ; y-size of a matrix element matrixspacing = 20.0 ;\nSpace between 2 matrices xoffset = 0.0 ; Between matrix and bounding box\nyoffset = 0.0 ; Between matrix and bounding box x-major = 20 ; Major\nticks on x axis every .. frames x-minor = 5 ; Id. Minor ticks\nx-firstmajor = 0 ; First frame for major tick x-majorat0 = no ; Major\ntick at first frame x-majorticklen = 8.0 ; x-majorticklength\nx-minorticklen = 4.0 ; x-minorticklength x-label = ; Used when there is\nnone in the .xpm x-fontsize = 16 ; Font size (pt) x-font = Times-Roman ;\nA PostScript Font x-tickfontsize = 10 ; Font size (pt) x-tickfont =\nHelvetica ; A PostScript Font y-major = 20 y-minor = 5 y-firstmajor = 0\ny-majorat0 = no y-majorticklen = 8.0 y-minorticklen = 4.0 y-label =\ny-fontsize = 16 y-font = Times-Roman y-tickfontsize = 10 y-tickfont =\nHelvetica\nDe esta manera, se generará el archivo de imagen ss.eps con las\nestructuras secundarias a color de la proteína a lo largo de la\ntrayectoria (o intervalo escogido con las opciones -b A -e B en la\nprimera línea de comandos).\nPara el caso del cálculo de las siguientes dos propiedades, densidad\ny enlaces de hidrógeno, se requerirá antes generar el archivo de entrada\ntopol.tpr de la siguiente manera:\ngmx grompp -f grompp.mdp -s coor-tpr.pdb -p topol.top -o\ntopol.tpr\n-> El archivo de entrada grompp.mdp, para este caso en particular,\nno requiere de datos específicos, por lo que bastará con que contenga\nlas siguientes líneas:\n; grompp.mdp - used as input into grompp to generate topol.tpr ;\nParameters describing what to do, when to stop and what to save\nintegrator = steep ; Algorithm (steep = steepest descent minimization)\nemtol = 1000.0 ; Stop minimization when the maximum force < 1000.0\nkJ/mol/nm emstep = 0.01 ; Minimization step size nsteps = 50000 ;\nMaximum number of (minimization) steps to perform\n; Parameters describing how to find the neighbors of each atom and\nhow to calculate the interactions nstlist = 1 ; Frequency to update the\nneighbor list and long range forces cutoff-scheme = Verlet ; Buffered\nneighbor searching ns_type = grid ; Method to determine neighbor list\n(simple, grid) coulombtype = PME ; Treatment of long range electrostatic\ninteractions rcoulomb = 1.0 ; Short-range electrostatic cut-off rvdw =\n1.0 ; Short-range Van der Waals cut-off pbc = xyz ; Periodic Boundary\nConditions in all 3 dimensions\n-> Por otro lado, el archivo de entrada topol.top es indispensable\ny se podrá obtener por medio del servidor https://www.charmm-gui.org/ → “Input generator” → “Force\nField Converter” utilizando los archivos de entrada *psf y *crd\nextraídos de la MD. Luego, se deberá marcar la opción “Gromacs” (al\nllegar al apartado “Input Generation Options”). Finalmente, luego de\ndescargar los archivos generados comprimidos (*.tgz) y dentro de la\ncarpeta “Gromacs” se encontrará el archivo de topología que\nrequerimos.\nDe esta manera obtendremos el archivo topol.top necesario para los\nsiguientes cálculos. Cabe mencionar que este archivo requiere también de\nlos archivos generados de extensión itp que se encuentran dentro de la\ncarpeta toppar.\nDensidad\nRespecto a este parámetro, a veces se requiere conocer la densidad de\ntodo el sistema o de alguna de las partes del mismo (sobre todo en el\ncaso de simulación de proteínas con membranas lipídicas), por lo que\npara tal motivo se utilizará la siguiente línea de comando:\ngmx density -f traj.xtc -s topol.tpr -o density.xvg -b A -e B\n-> Aquí utilizaremos el archivo de entrada recientemente generado\ntopol.tpr El resultado será el archivo de salida density.xvg el que\ncontiene la información de la densidad a lo largo de la trayectoria\nescogida.\nEnlaces de hidrógeno\nSe podrá calcular la cantidad de enlaces como función del tiempo\nutilizando la siguiente línea de comando:\ngmx hbond -f traj.xtc -s topol.tpr -num hbnum.xvg -dist hbdist.xvg\n-ang hbang.xvg -dan danum.xvg -b A -e B\n-> Aquí utilizaremos el archivo de entrada recientemente generado\ntopol.tpr\n-> El archivo de salida hbnum.xvg contendrá el número total de\nenlaces de hidrógeno por frame a lo largo de la trayectoria\nescogida.\n-> Los archivos de salida hbdist.xvg y hbang.xvg contendrán la\ndistribución de la distancia y de los ángulos, respectivamente, para\ntodos los enlaces de hidrógeno.\n-> El archivo de salida danum.xvg contendrá el número de dadores y\naceptores analizados en cada frame de la trayectoria escogida.\nDe esta manera se podrán graficar los archivos xvg relacionados con\nel cálculo de los enlaces de hidrógeno.\nFinalmente, cabe mencionar que se puede utilizar el programa make_ndx\npara seleccionar diversos átomos, residuos o incluso una mezcla entre\néstos y generar grupos que se guardarán en el archivo de salida\nindex.ndx, el que se podrá utilizar en todos los análisis vistos en el\npresente tutorial, en el caso que así lo requiramos, adicionando a la\nlínea de comandos lo siguiente: -n index.ndx.\n\n\n\nAbraham, Mark James, Teemu Murtola, Roland Schulz, Szilárd Páll, Jeremy\nC Smith, Berk Hess, and Erik Lindahl. 2015. “GROMACS: High\nPerformance Molecular Simulations Through Multi-Level Parallelism from\nLaptops to Supercomputers.” SoftwareX 1: 19–25.\n\n\nPáll, Szilárd, Artem Zhmurov, Paul Bauer, Mark Abraham, Magnus Lundborg,\nAlan Gray, Berk Hess, and Erik Lindahl. 2020. “Heterogeneous\nParallelization and Acceleration of Molecular Dynamics Simulations in\nGROMACS.” The Journal of Chemical Physics 153 (13):\n134110.\n\n\n\n\n",
    "preview": "posts/tutorial_gromacs/pictures/gromacs.png",
    "last_modified": "2022-10-03T15:15:14-05:00",
    "input_file": {}
  }
]
